{"version":3,"sources":["logo.svg","components/Card/index.js","utils/utils.js","containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","onClick","className","src","image","randomizeArray","arr","sort","a","b","Math","floor","random","showMessage","message","alert","Game","cards","id","cardClicked","card","state","clickedCards","includes","setState","loses","score","length","wins","highestScore","clickedCardsCopy","push","max","console","log","this","map","index","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,mKCS5BC,G,MANJ,SAACC,GACR,OAAO,yBAAKC,QAASD,EAAMC,QAASC,UAAU,wBAC1C,yBAAKC,IAAKH,EAAMI,WCLjB,SAASC,EAAeC,GAE3B,OAAOA,EAAIC,MAAK,SAACC,EAAEC,GAAH,OAAOC,KAAKC,MAAoB,IAAdD,KAAKE,UAAe,IAAI,EAAE,GAAG,KAG5D,SAASC,EAAYC,GAExBC,MAAMD,GAGK,IC6FAE,E,YA7EX,WAAYhB,GACX,IAAD,8BACI,4CAAMA,KArBViB,MAAM,CACF,CACIC,GAAG,UACHd,MAAM,oGAEV,CACIc,GAAG,UACHd,MAAM,gIAEV,CACIc,GAAG,UACHd,MAAM,iFAEV,CACIc,GAAG,cACHd,MAAM,uFAKd,EAYAe,YAAY,SAACC,GACT,GAAG,EAAKC,MAAMC,aAAaC,SAASH,EAAKF,IAErCL,EAAY,aACZ,EAAKW,SAAS,CACVF,aAAa,GACbG,MAAM,EAAKJ,MAAMI,MAAM,EACvBC,MAAM,EACNT,MAAMZ,EAAe,EAAKgB,MAAMJ,cAGnC,GAAI,EAAKI,MAAMC,aAAaK,OAAO,IAAK,EAAKN,MAAMJ,MAAMU,OAE1Dd,EAAY,YACZ,EAAKW,SAAS,CACVF,aAAa,GACbM,KAAK,EAAKP,MAAMO,KAAK,EACrBF,MAAM,EACNG,aAAa,EAAKR,MAAMJ,MAAMU,OAC9BV,MAAMZ,EAAe,EAAKgB,MAAMJ,aAIxC,CACI,IAAMa,EAAiB,EAAKT,MAAMC,aAClCQ,EAAiBC,KAAKX,EAAKF,IAC3B,EAAKM,SAAS,CAACP,MAAMZ,EAAe,EAAKgB,MAAMJ,OAC3CK,aAAaQ,EAAiBJ,MAAM,EAAKL,MAAMK,MAAM,EAAEG,aAAanB,KAAKsB,IAAI,EAAKX,MAAMK,MAAM,EAAE,EAAKL,MAAMQ,kBArCnH,EAAKR,MAAM,CACHJ,MAAM,EAAKA,MACXK,aAAa,GACbI,MAAM,EACNG,aAAa,EACbD,KAAK,EACLH,MAAM,GARlB,E,sEA+CC,IAAD,OAEI,OADAQ,QAAQC,IAAIC,KAAKd,MAAMC,cAChB,6BACH,iDACA,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,SACX,sCAAYiC,KAAKd,MAAMK,QAE3B,yBAAKxB,UAAU,SACX,8CAAoBiC,KAAKd,MAAMQ,gBAGvC,yBAAK3B,UAAU,OACX,yBAAKA,UAAU,SACX,qCAAWiC,KAAKd,MAAMO,OAE1B,yBAAK1B,UAAU,SACX,sCAAYiC,KAAKd,MAAMI,SAG/B,yBAAKvB,UAAU,OACViC,KAAKd,MAAMJ,MAAMmB,KAAI,SAAChB,EAAKiB,GAAN,OAAc,kBAAC,EAAD,CAAMC,IAAKD,EAAOpC,QAAS,kBAAI,EAAKkB,YAAYC,IAAOhB,MAAOgB,EAAKhB,iB,GA3FpGmC,aCOJC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e48f2d76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './styles.css';\n\nconst Card=(props)=>{\n    return <div onClick={props.onClick} className=\"col-3 card-component\">\n        <img src={props.image} />\n    </div>\n}\n\nexport default Card;","export function randomizeArray(arr)\n{\n    return arr.sort((a,b)=>Math.floor(Math.random()*1000)%2===0?1:-1);\n}\n\nexport function showMessage(message)\n{\n    alert(message);\n}\n\nexport default {\n    randomizeArray,\n    showMessage\n}","import React,{Component} from 'react'; \nimport Card from '../../components/Card';\nimport {randomizeArray,showMessage} from '../../utils/utils';\n\nclass Game extends Component\n{\n\n    cards=[\n        {\n            id:\"ferrari\",\n            image:\"https://d2d0b2rxqzh1q5.cloudfront.net/sv/1.67/dir/4b7/image/4b7261f2ad89fa043010d1dd0c4f80a2.jpg\"\n        },\n        {\n            id:\"redbull\",\n            image:\"https://s3-eu-west-1.amazonaws.com/crash.net/styles/large_article/s3/AP-21EJBRGRH2111_hires_jpeg_24bit_rgb.jpg?itok=CqBqD-Lj\"\n        },\n        {\n            id:\"renault\",\n            image:\"https://www.driving.co.uk/s3/st-driving-prod/uploads/2018/02/Renault-RS18.jpg\"\n        },\n        {\n            id:\"racingpoint\",\n            image:\"https://cdn.24.co.za/files/Cms/General/d/5974/bf2340b4dac4450e8f2127a4d00fe690.jpg\"\n        }\n    ]\n\n    constructor(props)\n    {\n        super(props);\n        this.state={\n                cards:this.cards,\n                clickedCards:[],\n                score:0,\n                highestScore:0,\n                wins:0,\n                loses:0\n        }\n    }\n\n    cardClicked=(card)=>{\n        if(this.state.clickedCards.includes(card.id))\n        {\n            showMessage(\"You lost!\");\n            this.setState({\n                clickedCards:[],\n                loses:this.state.loses+1,\n                score:0,\n                cards:randomizeArray(this.state.cards)\n            })\n        }\n        else if((this.state.clickedCards.length+1)===this.state.cards.length)\n        {\n            showMessage(\"You won!\");\n            this.setState({\n                clickedCards:[],\n                wins:this.state.wins+1,\n                score:0,\n                highestScore:this.state.cards.length,\n                cards:randomizeArray(this.state.cards)\n            })\n        }\n        else\n        {\n            const clickedCardsCopy=this.state.clickedCards;\n            clickedCardsCopy.push(card.id);\n            this.setState({cards:randomizeArray(this.state.cards),\n                clickedCards:clickedCardsCopy,score:this.state.score+1,highestScore:Math.max(this.state.score+1,this.state.highestScore)})\n            /* this could've been done with the spread operator as well. It's like saying spread yourself in comma separated values.\n            this.setState({clickedCards:[...this.state.clickedCards,card.id]}) */\n\n        }\n    }\n\n    render()\n    {   \n        console.log(this.state.clickedCards);\n        return <div>\n            <h1>I'm a clicky game</h1>\n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <h2>Score: {this.state.score}</h2>\n                </div>\n                <div className=\"col-6\">\n                    <h2>Highest Score: {this.state.highestScore}</h2>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <h3>Wins: {this.state.wins}</h3>\n                </div>\n                <div className=\"col-6\">\n                    <h3>Loses: {this.state.loses}</h3>\n                </div>\n            </div>\n            <div className=\"row\">\n                {this.state.cards.map((card,index)=><Card key={index} onClick={()=>this.cardClicked(card)} image={card.image} />)}\n                \n              \n            </div>\n        </div>\n    }\n}\n\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './containers/Game';\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}